"""Assignment3 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fT9gNVg1FlSDW4fgIyVcEP9dEfonRkMP
"""

import torch
import torchvision
import torchvision.transforms as transforms

from torch.optim.lr_scheduler import StepLR

# Define transformatin.
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

# Load the data set and generate DataLoader based on  batch size and applying transformations.
trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=100,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=100,
                                         shuffle=False, num_workers=2)

#Name device as CUDA if GPU is available else CPU.
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') 
print(device)

#Classes in the dataset
classes = trainset.classes

"""
Defining neural net
"""

import torch.nn as nn
import torch.nn.functional as F

"""
#This code will help in finding sizes of the conv layers.


dataiter = iter(trainloader)
images, labels = dataiter.next()

conv1 = nn.Conv2d(3, 6, 3, 1, 1) #3= Number of channels in input image, 6= Number of channels in output image, 3= Kernel size(5*5 conv matrix)
pool = nn.MaxPool2d(2, 2)

x = conv1(images)
print(x.shape)

conv2 = nn.Conv2d(6, 16, 3)
x = pool(conv2(x))
print(x.shape)

conv3 = nn.Conv2d(16, 16, 3)
x = pool(conv3(x))
print(x.shape)
"""

# ConvNet class
class Net(nn.Module):
  def __init__(self):
    super(Net, self).__init__()
    self.conv1 = nn.Conv2d(3, 6, 3, 1, 1) #Stride 1 padding 1
    #self.conv1 = nn.Conv2d(3, 6, 3) # 32*32*3 --> 31*31*6
    self.conv2 = nn.Conv2d(6, 16, 3) # 32*32*6 --> 30*30*16
    self.pool = nn.MaxPool2d(2, 2)
    self.bn1 = nn.BatchNorm2d(16)
    self.conv3 = nn.Conv2d(16, 16, 3) # 15*15*16 --> 13*13*16
    self.bn2 = nn.BatchNorm2d(16)
    self.fc1 = nn.Linear(16 * 6 * 6, 1024)
    self.fc2 = nn.Linear(1024, 512)
    self.fc3 = nn.Linear(512, 84)
    self.fc4 = nn.Linear(84, 10)

  def forward(self, x):
    x = F.relu(self.conv1(x))
    x = self.pool(F.relu(self.bn1(self.conv2(x))))
    x = self.pool(F.relu(self.bn2(self.conv3(x))))
    x = x.view(-1, 16 * 6 * 6)
    x = F.relu(self.fc1(x))
    x = F.relu(self.fc2(x))
    x = F.relu(self.fc3(x))
    x = self.fc4(x)
    return x

# Get model object and send it to the availabe device i.e CPU or CUDA.
net = Net().to(device)


# Define optmizer.
import torch.optim as optim
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.01, momentum=0.9)
#scheduler = StepLR(optimizer, step_size=2, gamma=0.1)


num_epochs = 10
start = torch.cuda.Event(enable_timing=True)
end = torch.cuda.Event(enable_timing=True)
start.record()
for epoch in range(num_epochs):  # loop over the dataset multiple times
     
    #print('Epoch:', epoch,'LR:', scheduler.get_last_lr())
    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):
        # get the inputs; data is a list of [inputs, labels]
        inputs, labels = data

        # zero the parameter gradients
        optimizer.zero_grad()
        inputs = inputs.to(device)
        labels = labels.to(device)
        # forward + backward + optimize
        outputs = net(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        # print statistics
        running_loss += loss.item()
    '''   

    # This code will print testing accuracy at each epoch so that we can get idea from start.
    net.eval()
    with torch.no_grad():
          n_correct = 0
          n_samples = 0
          n_class_correct = [0 for i in range(100)]
          n_class_samples = [0 for i in range(100)]
          for images, labels in testloader:
              images = images.to(device)
              labels = labels.to(device)
              outputs = net(images)
              # max returns (value ,index)
              _, predicted = torch.max(outputs, 1)
              n_samples += labels.size(0)
              n_correct += (predicted == labels).sum().item()
              
          
    acc = 100.0 * n_correct / n_samples
    net.train()
    #scheduler.step()  
    print (f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}, Accuracy: {acc} %')
    '''
end.record()        
torch.cuda.synchronize()

print(f'Time taken to train and test in same loop is {start.elapsed_time(end)/60000} minutes.')
          
          
#net.train()
print('Finished Training')



#print(f'Time taken to train the model {start.elapsed_time(end)/60000} minutes.')

'''
	This code will print accuracy of complete network and also class wise accuracy.
'''
with torch.no_grad():
    n_correct = 0
    n_samples = 0
    n_class_correct = [0 for i in range(10)]
    n_class_samples = [0 for i in range(10)]
    for images, labels in testloader:
        images = images.to(device)
        labels = labels.to(device)
        outputs = net(images)
        # max returns (value ,index)
        _, predicted = torch.max(outputs, 1)
        n_samples += labels.size(0)
        n_correct += (predicted == labels).sum().item()
        
        for i in range(100):
            label = labels[i]
            pred = predicted[i]
            if (label == pred):
                n_class_correct[label] += 1
            n_class_samples[label] += 1
        
    acc = 100.0 * n_correct / n_samples
    print(f'Accuracy of the network: {acc} %')

    for i in range(10):
        acc = 100.0 * n_class_correct[i] / n_class_samples[i]
        print(f'Accuracy of {classes[i]}: {acc} %')

