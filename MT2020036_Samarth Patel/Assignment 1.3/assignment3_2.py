"""Assignment3_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11H4wSf9OPyc0Y87YG5t_VZIuH6c1syya
"""

import torch
import torchvision
import torchvision.transforms as transforms
import torch.optim as optim
import torch.nn as nn
import torchvision.models as models



#Define transformations
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

#Downloading data and generate dataloader by applying transformations
train_data = torchvision.datasets.STL10(root='./data', split='train', download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(train_data, batch_size=4, shuffle=True, num_workers=2)
test_data = torchvision.datasets.STL10(root='./data',split='test', download=True, transform=transform)
testloader = torch.utils.data.DataLoader(test_data, batch_size=4, shuffle=False, num_workers=2)


classes = train_data.classes




#Load pretrained alexnet model
model = models.alexnet(pretrained=True)

# Remove last layer of alexnet.
classifier = nn.Sequential(*list(model.classifier.children())[:-1])
model.classifier = classifier



#Freeze alexnet parameters.
for param in model.parameters(): 
    param.requires_grad = False

#Define Linear SVM.
class SVM(nn.Module):
    def __init__(self):
        super().__init__()  
        self.fc = nn.Linear(in_features=4096, out_features=10)  
        
    def forward(self, x):
        fwd = self.fc(x)  # Forward pass
        return fwd

model_svm = SVM()

model_transfer = nn.Sequential(model, model_svm)

print(model_transfer)


device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
model_transfer.to(device)


#Define loss and optmizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model_transfer.parameters(), lr=0.01, momentum=0.9)

n_total_steps = len(trainloader)

index = 0
num_epochs = 5
for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(trainloader):
        images = images.to(device)
        labels = labels.to(device)
        # Forward pass
        outputs = model_transfer(images)
        loss = criterion(outputs, labels)
        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
    '''  
    #This code will print test accuracy at each step.

    final_model.eval()
    with torch.no_grad():
      n_correct = 0
      n_samples = 0
      n_class_correct = [0 for i in range(10)]
      n_class_samples = [0 for i in range(10)]
      for images, labels in testloader:
          images = images.to(device)
          labels = labels.to(device)
          outputs = final_model(images)
          _, predicted = torch.max(outputs, 1)
          n_samples += labels.size(0)
          n_correct += (predicted == labels).sum().item()
        
      acc = 100.0 * n_correct / n_samples
      print (f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}, Accuracy: {acc} %') 
      index = (index+1) % 2
    final_model.train()
    '''
print('Finished Training')


#This will print accuracy of network and class wise accuracy.
with torch.no_grad():
    n_correct = 0
    n_samples = 0
    n_class_correct = [0 for i in range(10)]
    n_class_samples = [0 for i in range(10)]
    for images, labels in testloader:
        images = images.to(device)
        labels = labels.to(device)
        outputs = model_transfer(images)
        # max returns (value ,index)
        _, predicted = torch.max(outputs, 1)
        n_samples += labels.size(0)
        n_correct += (predicted == labels).sum().item()
        
        for i in range(4):
            label = labels[i]
            pred = predicted[i]
            if (label == pred):
                n_class_correct[label] += 1
            n_class_samples[label] += 1
        
    acc = 100.0 * n_correct / n_samples
    print(f'Accuracy of the network: {acc} %')

    for i in range(10):
        acc = 100.0 * n_class_correct[i] / n_class_samples[i]
        print(f'Accuracy of {classes[i]}: {acc} %')

"""
Fine tunning pretrained ALexNet on STL10 dataset.
"""
#Load pretrained alexnet
AlexNet_model = torchvision.models.alexnet(pretrained=True)



criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model_transfer.parameters(), lr=0.01, momentum=0.9)
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
AlexNet_model.to(device)
index = 0
num_epochs = 20
for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(trainloader):
        images = images.to(device)
        labels = labels.to(device)
        # Forward pass
        outputs = AlexNet_model(images)
        loss = criterion(outputs, labels)
        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

with torch.no_grad():
    n_correct = 0
    n_samples = 0
    n_class_correct = [0 for i in range(10)]
    n_class_samples = [0 for i in range(10)]
    for images, labels in testloader:
        images = images.to(device)
        labels = labels.to(device)
        outputs = model_transfer(images)
        # max returns (value ,index)
        _, predicted = torch.max(outputs, 1)
        n_samples += labels.size(0)
        n_correct += (predicted == labels).sum().item()
        
        for i in range(4):
            label = labels[i]
            pred = predicted[i]
            if (label == pred):
                n_class_correct[label] += 1
            n_class_samples[label] += 1
        
    acc = 100.0 * n_correct / n_samples
    print(f'Accuracy of the network: {acc} %')

    for i in range(10):
        acc = 100.0 * n_class_correct[i] / n_class_samples[i]
        print(f'Accuracy of {classes[i]}: {acc} %')

